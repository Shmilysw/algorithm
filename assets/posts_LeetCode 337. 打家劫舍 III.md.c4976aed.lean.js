import{_ as s,v as n,b as a,R as l}from"./chunks/framework.12f635d0.js";const h=JSON.parse('{"title":"LeetCode 337. 打家劫舍 III","description":"","frontmatter":{"title":"LeetCode 337. 打家劫舍 III","date":"2023-08-02T00:00:00.000Z","tags":["树形dp","dp"]},"headers":[],"relativePath":"posts/LeetCode 337. 打家劫舍 III.md","filePath":"posts/LeetCode 337. 打家劫舍 III.md"}'),e={name:"posts/LeetCode 337. 打家劫舍 III.md"},p=l(`<hr><h2 id="树形dp" tabindex="-1">树形dp <a class="header-anchor" href="#树形dp" aria-label="Permalink to &quot;树形dp&quot;">​</a></h2><h2 id="leetcode-337-打家劫舍-iii" tabindex="-1"><a href="https://leetcode.cn/problems/house-robber-iii/description/" target="_blank" rel="noreferrer">LeetCode 337. 打家劫舍 III</a> <a class="header-anchor" href="#leetcode-337-打家劫舍-iii" aria-label="Permalink to &quot;[LeetCode 337. 打家劫舍 III](https://leetcode.cn/problems/house-robber-iii/description/)&quot;">​</a></h2><p>小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 <code>root</code> 。</p><p>除了 <code>root</code> 之外，每栋房子有且只有一个&quot;父&quot;房子与之相连。一番侦察之后，聪明的小偷意识到&quot;这个地方的所有房屋的排列类似于一棵二叉树&quot;。 如果 两个直接相连的房子在同一天晚上被打劫 ，房屋将自动报警。</p><p>给定二叉树的 <code>root</code> 。返回 在不触动警报的情况下 ，小偷能够盗取的最高金额 。</p><h3 id="示例-1" tabindex="-1">示例 1: <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1:&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入: root = [3,2,3,null,3,null,1]</span></span>
<span class="line"><span style="color:#000000;">输出: 7 </span></span>
<span class="line"><span style="color:#000000;">解释: 小偷一晚能够盗取的最高金额 3 + 3 + 1 = 7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="示例-2" tabindex="-1">示例 2: <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2:&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入: root = [3,4,5,1,3,null,1]</span></span>
<span class="line"><span style="color:#000000;">输出: 9</span></span>
<span class="line"><span style="color:#000000;">解释: 小偷一晚能够盗取的最高金额 4 + 5 = 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="提示" tabindex="-1">提示： <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示：&quot;">​</a></h3><ul><li>树的节点数在 [1, 10^4] 范围内</li><li>0 &lt;= Node.val &lt;= 10^4</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki light-plus"><code><span class="line"><span style="color:#008000;"># Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#008000;"># class TreeNode:</span></span>
<span class="line"><span style="color:#008000;">#     def __init__(self, val=0, left=None, right=None):</span></span>
<span class="line"><span style="color:#008000;">#         self.val = val</span></span>
<span class="line"><span style="color:#008000;">#         self.left = left</span></span>
<span class="line"><span style="color:#008000;">#         self.right = right</span></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#000000;"> </span><span style="color:#267F99;">Solution</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">def</span><span style="color:#000000;"> </span><span style="color:#795E26;">rob</span><span style="color:#000000;">(</span><span style="color:#001080;">self</span><span style="color:#000000;">, </span><span style="color:#001080;">root</span><span style="color:#000000;">: Optional[TreeNode]) -&gt; </span><span style="color:#267F99;">int</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">def</span><span style="color:#000000;"> </span><span style="color:#795E26;">dfs</span><span style="color:#000000;">(</span><span style="color:#001080;">node</span><span style="color:#000000;">):</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> node </span><span style="color:#0000FF;">is</span><span style="color:#000000;"> </span><span style="color:#0000FF;">None</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#098658;">0</span><span style="color:#000000;">, </span><span style="color:#098658;">0</span></span>
<span class="line"><span style="color:#000000;">            l_rob, l_not_rob = dfs(node.left)</span></span>
<span class="line"><span style="color:#000000;">            r_rob, r_not_rob = dfs(node.right)</span></span>
<span class="line"><span style="color:#000000;">            rob = l_not_rob + r_not_rob + node.val</span></span>
<span class="line"><span style="color:#000000;">            not_rob = </span><span style="color:#795E26;">max</span><span style="color:#000000;">(l_rob, l_not_rob) + </span><span style="color:#795E26;">max</span><span style="color:#000000;">(r_rob, r_not_rob)</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> rob, not_rob</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">max</span><span style="color:#000000;">(dfs(root))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,13),o=[p];function r(t,c,i,d,b,u){return n(),a("div",null,o)}const m=s(e,[["render",r]]);export{h as __pageData,m as default};
