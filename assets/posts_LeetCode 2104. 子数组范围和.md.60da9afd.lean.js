import{_ as s,v as n,b as a,R as l}from"./chunks/framework.12f635d0.js";const m=JSON.parse('{"title":"LeetCode 2104. 子数组范围和","description":"","frontmatter":{"title":"LeetCode 2104. 子数组范围和","date":"2023-08-01T00:00:00.000Z","tags":["单调栈","贡献法"]},"headers":[],"relativePath":"posts/LeetCode 2104. 子数组范围和.md","filePath":"posts/LeetCode 2104. 子数组范围和.md"}'),p={name:"posts/LeetCode 2104. 子数组范围和.md"},e=l(`<hr><h2 id="单调栈" tabindex="-1">单调栈 <a class="header-anchor" href="#单调栈" aria-label="Permalink to &quot;单调栈&quot;">​</a></h2><h2 id="leetcode-2104-子数组范围和" tabindex="-1"><a href="https://leetcode.cn/problems/sum-of-subarray-ranges/description/" target="_blank" rel="noreferrer">LeetCode 2104. 子数组范围和</a> <a class="header-anchor" href="#leetcode-2104-子数组范围和" aria-label="Permalink to &quot;[LeetCode 2104. 子数组范围和](https://leetcode.cn/problems/sum-of-subarray-ranges/description/)&quot;">​</a></h2><p><code>中等</code></p><p>给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。</p><p>返回 nums 中 所有 子数组范围的 和 。</p><p>子数组是数组中一个连续 非空 的元素序列。</p><h3 id="示例-1" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">输入：nums = [1,2,3]</span></span>
<span class="line"><span style="color:#24292e;">输出：4</span></span>
<span class="line"><span style="color:#24292e;">解释：nums 的 6 个子数组如下所示：</span></span>
<span class="line"><span style="color:#24292e;">[1]，范围 = 最大 - 最小 = 1 - 1 = 0 </span></span>
<span class="line"><span style="color:#24292e;">[2]，范围 = 2 - 2 = 0</span></span>
<span class="line"><span style="color:#24292e;">[3]，范围 = 3 - 3 = 0</span></span>
<span class="line"><span style="color:#24292e;">[1,2]，范围 = 2 - 1 = 1</span></span>
<span class="line"><span style="color:#24292e;">[2,3]，范围 = 3 - 2 = 1</span></span>
<span class="line"><span style="color:#24292e;">[1,2,3]，范围 = 3 - 1 = 2</span></span>
<span class="line"><span style="color:#24292e;">所有范围的和是 0 + 0 + 0 + 1 + 1 + 2 = 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="示例-2" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">输入：nums = [1,3,3]</span></span>
<span class="line"><span style="color:#24292e;">输出：4</span></span>
<span class="line"><span style="color:#24292e;">解释：nums 的 6 个子数组如下所示：</span></span>
<span class="line"><span style="color:#24292e;">[1]，范围 = 最大 - 最小 = 1 - 1 = 0</span></span>
<span class="line"><span style="color:#24292e;">[3]，范围 = 3 - 3 = 0</span></span>
<span class="line"><span style="color:#24292e;">[3]，范围 = 3 - 3 = 0</span></span>
<span class="line"><span style="color:#24292e;">[1,3]，范围 = 3 - 1 = 2</span></span>
<span class="line"><span style="color:#24292e;">[3,3]，范围 = 3 - 3 = 0</span></span>
<span class="line"><span style="color:#24292e;">[1,3,3]，范围 = 3 - 1 = 2</span></span>
<span class="line"><span style="color:#24292e;">所有范围的和是 0 + 0 + 0 + 2 + 0 + 2 = 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="示例-3" tabindex="-1">示例 3： <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例 3：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light"><code><span class="line"><span style="color:#24292e;">输入：nums = [4,-2,-3,4,1]</span></span>
<span class="line"><span style="color:#24292e;">输出：59</span></span>
<span class="line"><span style="color:#24292e;">解释：nums 中所有子数组范围的和是 59</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="提示" tabindex="-1">提示： <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示：&quot;">​</a></h3><ul><li>1 &lt;= nums.length &lt;= 1000</li><li>-10^9 &lt;= nums[i] &lt;= 10^9</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subArrayRanges</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 单调栈 时间复杂度: O(n)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 分别存储左边的最小值、最大值、右边的最小值、最大值</span></span>
<span class="line"><span style="color:#24292E;">        vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lsmall</span><span style="color:#24292E;">(len), </span><span style="color:#6F42C1;">rsmall</span><span style="color:#24292E;">(len), </span><span style="color:#6F42C1;">llarge</span><span style="color:#24292E;">(len), </span><span style="color:#6F42C1;">rlarge</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">        stack</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> stk;</span></span>
<span class="line"><span style="color:#24292E;">        stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 从左到右单调增栈，不能出栈时栈顶就是当前元素左侧最近的小于当前元素的节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len ; i </span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> nums[i]) {</span></span>
<span class="line"><span style="color:#24292E;">                stk.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            lsmall[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 从右到左单调增长，不能出栈时栈顶就是当前元素右侧最近的小于当前元素的节点</span></span>
<span class="line"><span style="color:#24292E;">        stk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stack</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ; i </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> nums[i]) {</span></span>
<span class="line"><span style="color:#24292E;">                stk.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            rsmall[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 从左到右单调栈减，不能出栈时栈顶即为当前元素左侧最近的大于当前元素的节点</span></span>
<span class="line"><span style="color:#24292E;">        stk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stack</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len ; i </span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> nums[i]) {</span></span>
<span class="line"><span style="color:#24292E;">                stk.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            llarge[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 从右到左单调减栈，不能出栈时栈顶就是当前元素右侧最近的大于当前元素的节点</span></span>
<span class="line"><span style="color:#24292E;">        stk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stack</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ; i </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nums[i]) {</span></span>
<span class="line"><span style="color:#24292E;">                stk.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            rlarge[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stk.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            stk.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 计算结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len ; i </span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#6A737D;">            //i作为最大值使用了(i - llarge[i]) * (rlarge[i] - i)次 需要在结果中增加这些</span></span>
<span class="line"><span style="color:#6A737D;">            // 为什么是乘？ 因为对于左边的任一一个i到large[i]的中间，我们都可以选择任一一个i到rlarge[i]中间的任意一个下标作为右边界，即最终为乘法</span></span>
<span class="line"><span style="color:#24292E;">            res </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> nums[i] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">ll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> llarge[i]) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (rlarge[i] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">            res </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> nums[i] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">ll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lsmall[i]) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (rsmall[i] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div>`,16),o=[e];function r(c,t,y,i,b,E){return n(),a("div",null,o)}const A=s(p,[["render",r]]);export{m as __pageData,A as default};
