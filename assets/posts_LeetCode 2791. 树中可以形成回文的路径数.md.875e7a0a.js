import{_ as a,v as l,b as p,T as e,O as o,R as s,M as r,L as c}from"./chunks/framework.0f10bb36.js";const t="/algorithm/assets/image.29609170.png",v=JSON.parse('{"title":"LeetCode 2791. 树中可以形成回文的路径数","description":"","frontmatter":{"title":"LeetCode 2791. 树中可以形成回文的路径数","date":"2023-08-11T00:00:00.000Z","tags":["位运算","dfs"]},"headers":[],"relativePath":"posts/LeetCode 2791. 树中可以形成回文的路径数.md","filePath":"posts/LeetCode 2791. 树中可以形成回文的路径数.md"}'),i={name:"posts/LeetCode 2791. 树中可以形成回文的路径数.md"},y=s('<hr><h2 id="位运算-dfs" tabindex="-1">位运算 + dfs <a class="header-anchor" href="#位运算-dfs" aria-label="Permalink to &quot;位运算 + dfs&quot;">​</a></h2><h2 id="leetcode-2791-树中可以形成回文的路径数" tabindex="-1"><a href="https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/" target="_blank" rel="noreferrer">LeetCode 2791. 树中可以形成回文的路径数</a> <a class="header-anchor" href="#leetcode-2791-树中可以形成回文的路径数" aria-label="Permalink to &quot;[LeetCode 2791. 树中可以形成回文的路径数](https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/)&quot;">​</a></h2>',3),b=s('<p>给你一棵 树（即，一个连通、无向且无环的图），根 节点为 <code>0</code> ，由编号从 <code>0</code> 到 <code>n - 1</code> 的 <code>n</code> 个节点组成。</p><p>这棵树用一个长度为 <code>n</code> 、下标从 <code>0</code> 开始的数组 <code>parent</code> 表示，其中 <code>parent[i]</code> 为节点 <code>i</code> 的父节点，由于</p><p>节点 <code>0</code> 为根节点，所以 <code>parent[0] == -1</code> 。另给你一个长度为 <code>n</code> 的字符串 <code>s</code> ，其中 <code>s[i]</code> 是分配给 <code>i</code></p><p>和 <code>parent[i]</code> 之间的边的字符。<code>s[0]</code> 可以忽略。找出满足 <code>u &lt; v</code> ，且从 <code>u</code> 到 <code>v</code> 的路径上分配的字符可</p><p>以 重新排列 形成 回文 的所有节点对 <code>(u, v)</code> ，并返回节点对的数目。如果一个字符串正着读和反着读都相</p><p>同，那么这个字符串就是一个 回文 。</p><h3 id="示例-1" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1：&quot;">​</a></h3><p><img src="'+t+`" alt="Alt text"></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入：parent = [-1,0,0,1,1,2], s = &quot;acaabc&quot;</span></span>
<span class="line"><span style="color:#000000;">输出：8</span></span>
<span class="line"><span style="color:#000000;">解释：符合题目要求的节点对分别是：</span></span>
<span class="line"><span style="color:#000000;">- (0,1)、(0,2)、(1,3)、(1,4) 和 (2,5) ，路径上只有一个字符，满足回文定义。</span></span>
<span class="line"><span style="color:#000000;">- (2,3)，路径上字符形成的字符串是 &quot;aca&quot; ，满足回文定义。</span></span>
<span class="line"><span style="color:#000000;">- (1,5)，路径上字符形成的字符串是 &quot;cac&quot; ，满足回文定义。</span></span>
<span class="line"><span style="color:#000000;">- (3,5)，路径上字符形成的字符串是 &quot;acac&quot; ，可以重排形成回文 &quot;acca&quot; 。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="示例-2" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入：parent = [-1,0,0,0,0], s = &quot;aaaaa&quot;</span></span>
<span class="line"><span style="color:#000000;">输出：10</span></span>
<span class="line"><span style="color:#000000;">解释：任何满足 u &lt; v 的节点对 (u,v) 都符合题目要求。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="提示" tabindex="-1">提示： <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示：&quot;">​</a></h3><ul><li>n == parent.length == s.length</li><li>1 &lt;= n &lt;= 10^5</li><li>对于所有 i &gt;= 1 ，0 &lt;= parent[i] &lt;= n - 1 均成立</li><li>parent[0] == -1</li><li>parent 表示一棵有效的树</li><li>s 仅由小写英文字母组成</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki light-plus"><code><span class="line"><span style="color:#008000;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#008000;">1. 从 u 到 v 的路径上分配的字符可以 重新排列 形成 回文</span></span>
<span class="line"><span style="color:#008000;">=&gt; 至多一个字母出现奇数次，其余字母出现偶数次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">2. 偶数次用 0 表示，奇数次用 1 表示</span></span>
<span class="line"><span style="color:#008000;">=&gt; 用长为 26 的 bool 数组 =&gt; 用一个 int 表示</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">3. 用异或来处理字母出现的奇偶性</span></span>
<span class="line"><span style="color:#008000;">   计算的是从根到某个点的路径上的边异或值</span></span>
<span class="line"><span style="color:#008000;">   从 lca 到 b 的异或 = 根到 b 的异或值 ^ 根到 lca 的异或值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">XOR_a = 根到 a 的异或值</span></span>
<span class="line"><span style="color:#008000;">4. 根到 b 的异或值 ^ 根到 lca 的异或值 = XOR_a ^ XOR_b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">5. 问题变成 XOR_a ^ XOR_b = 0 或者 1 &lt;&lt; i  i 取 0 ~ 25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">用一次 DFS 求出所有的 XOR_a</span></span>
<span class="line"><span style="color:#008000;">6. 问题变成，给你一个长度为 n-1 的数组</span></span>
<span class="line"><span style="color:#008000;">有多少个“两数异或”是 0，是 1 &lt;&lt; 0，是 1 &lt;&lt; 1 ... 1 &lt;&lt; 25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">7. 如果单独一个数 XOR_a 就已经满足要求了，那么可以让它异或 0，转换成两数异或的情况（异或的是一条空路径）</span></span>
<span class="line"><span style="color:#008000;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#000000;"> </span><span style="color:#267F99;">Solution</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">def</span><span style="color:#000000;"> </span><span style="color:#795E26;">countPalindromePaths</span><span style="color:#000000;">(</span><span style="color:#001080;">self</span><span style="color:#000000;">, </span><span style="color:#001080;">parent</span><span style="color:#000000;">: List[</span><span style="color:#267F99;">int</span><span style="color:#000000;">], </span><span style="color:#001080;">s</span><span style="color:#000000;">: </span><span style="color:#267F99;">str</span><span style="color:#000000;">) -&gt; </span><span style="color:#267F99;">int</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">        n = </span><span style="color:#795E26;">len</span><span style="color:#000000;">(s)</span></span>
<span class="line"><span style="color:#000000;">        g = [[] </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> _ </span><span style="color:#AF00DB;">in</span><span style="color:#000000;"> </span><span style="color:#795E26;">range</span><span style="color:#000000;">(n)]</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> i </span><span style="color:#AF00DB;">in</span><span style="color:#000000;"> </span><span style="color:#795E26;">range</span><span style="color:#000000;">(</span><span style="color:#098658;">1</span><span style="color:#000000;">, n):</span></span>
<span class="line"><span style="color:#000000;">            bit = </span><span style="color:#098658;">1</span><span style="color:#000000;"> &lt;&lt; (</span><span style="color:#795E26;">ord</span><span style="color:#000000;">(s[i]) - </span><span style="color:#795E26;">ord</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;a&#39;</span><span style="color:#000000;">)) </span><span style="color:#008000;"># s[i] - &#39;a&#39;</span></span>
<span class="line"><span style="color:#000000;">            g[parent[i]].append((i, bit))</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#008000;"># 时间复杂度: O(26n)</span></span>
<span class="line"><span style="color:#000000;">        ans = </span><span style="color:#098658;">0</span></span>
<span class="line"><span style="color:#000000;">        cnt = Counter()</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">def</span><span style="color:#000000;"> </span><span style="color:#795E26;">dfs</span><span style="color:#000000;">(</span><span style="color:#001080;">v</span><span style="color:#000000;">: </span><span style="color:#267F99;">int</span><span style="color:#000000;">, </span><span style="color:#001080;">xor</span><span style="color:#000000;">: </span><span style="color:#267F99;">int</span><span style="color:#000000;">) -&gt; </span><span style="color:#0000FF;">None</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#0000FF;">nonlocal</span><span style="color:#000000;"> ans</span></span>
<span class="line"><span style="color:#000000;">            ans += cnt[xor] </span><span style="color:#008000;"># xor ^ xor = 0</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> i </span><span style="color:#AF00DB;">in</span><span style="color:#000000;"> </span><span style="color:#795E26;">range</span><span style="color:#000000;">(</span><span style="color:#098658;">26</span><span style="color:#000000;">):</span></span>
<span class="line"><span style="color:#000000;">                ans += cnt[xor ^ (</span><span style="color:#098658;">1</span><span style="color:#000000;"> &lt;&lt; i)] </span><span style="color:#008000;"># xor ^ (xor ^ (1 &lt;&lt; i)) = 1 &lt;&lt; i</span></span>
<span class="line"><span style="color:#000000;">            cnt[xor] += </span><span style="color:#098658;">1</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> to, wt </span><span style="color:#AF00DB;">in</span><span style="color:#000000;"> g[v]:</span></span>
<span class="line"><span style="color:#000000;">                dfs(to, xor ^ wt)</span></span>
<span class="line"><span style="color:#000000;">        dfs(</span><span style="color:#098658;">0</span><span style="color:#000000;">, </span><span style="color:#098658;">0</span><span style="color:#000000;">) </span><span style="color:#008000;"># cnt[0] -&gt; 单个字符也是回文串</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> ans</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki light-plus"><code><span class="line"><span style="color:#0000FF;">typedef</span><span style="color:#000000;"> pair&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; PII;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#000000;"> </span><span style="color:#267F99;">Solution</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">public:</span></span>
<span class="line"><span style="color:#000000;">    vector&lt;vector&lt;PII&gt;&gt; g;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> ans;</span></span>
<span class="line"><span style="color:#000000;">    unordered_map&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; cnt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">void</span><span style="color:#000000;"> </span><span style="color:#795E26;">dfs</span><span style="color:#000000;">(</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">v</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">xorr</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        ans += </span><span style="color:#001080;">cnt</span><span style="color:#000000;">[xorr];</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">0</span><span style="color:#000000;">; i &lt; </span><span style="color:#098658;">26</span><span style="color:#000000;"> ; i ++ )</span></span>
<span class="line"><span style="color:#000000;">            ans += </span><span style="color:#001080;">cnt</span><span style="color:#000000;">[xorr ^ (</span><span style="color:#098658;">1</span><span style="color:#000000;"> &lt;&lt; i)];</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">cnt</span><span style="color:#000000;">[xorr] += </span><span style="color:#098658;">1</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">auto</span><span style="color:#000000;"> &amp;[to, wt]: </span><span style="color:#001080;">g</span><span style="color:#000000;">[v])</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#795E26;">dfs</span><span style="color:#000000;">(to, xorr ^ wt);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#795E26;">countPalindromePaths</span><span style="color:#000000;">(</span><span style="color:#267F99;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt;</span><span style="color:#0000FF;">&amp;</span><span style="color:#000000;"> </span><span style="color:#001080;">parent</span><span style="color:#000000;">, </span><span style="color:#267F99;">string</span><span style="color:#000000;"> </span><span style="color:#001080;">s</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> n = </span><span style="color:#001080;">s</span><span style="color:#000000;">.</span><span style="color:#795E26;">size</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">g</span><span style="color:#000000;">.</span><span style="color:#795E26;">resize</span><span style="color:#000000;">(n);</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">1</span><span style="color:#000000;">; i &lt; n ; i ++ ) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> bit = </span><span style="color:#098658;">1</span><span style="color:#000000;"> &lt;&lt; (</span><span style="color:#001080;">s</span><span style="color:#000000;">[i] - </span><span style="color:#A31515;">&#39;a&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">g</span><span style="color:#000000;">[</span><span style="color:#001080;">parent</span><span style="color:#000000;">[i]].</span><span style="color:#795E26;">push_back</span><span style="color:#000000;">({i, bit});</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">dfs</span><span style="color:#000000;">(</span><span style="color:#098658;">0</span><span style="color:#000000;">, </span><span style="color:#098658;">0</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> ans;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,16);function u(d,m,F,h,g,_){const n=r("font");return l(),p("div",null,[y,e(n,{color:"red"},{default:o(()=>[c("困难")]),_:1}),b])}const x=a(i,[["render",u]]);export{v as __pageData,x as default};
