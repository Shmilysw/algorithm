import{_ as a,v as l,b as p,T as e,O as o,R as s,M as r,L as c}from"./chunks/framework.0f10bb36.js";const _=JSON.parse('{"title":"LeetCode 2813. 子序列最大优雅度","description":"","frontmatter":{"title":"LeetCode 2813. 子序列最大优雅度","date":"2023-08-07T00:00:00.000Z","tags":["反悔贪心"]},"headers":[],"relativePath":"posts/LeetCode 2813. 子序列最大优雅度.md","filePath":"posts/LeetCode 2813. 子序列最大优雅度.md"}'),t={name:"posts/LeetCode 2813. 子序列最大优雅度.md"},i=s('<hr><h2 id="bfs-二分" tabindex="-1">bfs + 二分 <a class="header-anchor" href="#bfs-二分" aria-label="Permalink to &quot;bfs + 二分&quot;">​</a></h2><h2 id="leetcode-2813-子序列最大优雅度" tabindex="-1"><a href="https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/description/" target="_blank" rel="noreferrer">LeetCode 2813. 子序列最大优雅度</a> <a class="header-anchor" href="#leetcode-2813-子序列最大优雅度" aria-label="Permalink to &quot;[LeetCode 2813. 子序列最大优雅度](https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/description/)&quot;">​</a></h2>',3),y=s(`<p>给你一个长度为 <code>n</code> 的二维整数数组 <code>items</code> 和一个整数 <code>k</code> 。</p><p><code>items[i] = [profiti, categoryi]</code>，其中 <code>profiti</code> 和 <code>categoryi</code> 分别表示第 i 个项目的利润和类别。</p><p>现定义 <code>items</code> 的 子序列 的 优雅度 可以用 <code>total_profit + distinct_categories2</code> 计算，</p><p>其中 <code>total_profit</code> 是子序列中所有项目的利润总和，<code>distinct_categories</code> 是所选子序列所含的所有类别</p><p>中不同类别的数量。你的任务是从 <code>items</code> 所有长度为 <code>k</code> 的子序列中，找出 最大优雅度 。</p><p>用整数形式表示并返回 <code>items</code> 中所有长度恰好为 <code>k</code> 的子序列的最大优雅度。</p><p>注意：数组的子序列是经由原数组删除一些元素（可能不删除）而产生的新数组，且删除不改变其余元素相对顺</p><p>序。</p><h3 id="示例-1" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入：items = [[3,2],[5,1],[10,1]], k = 2</span></span>
<span class="line"><span style="color:#000000;">输出：17</span></span>
<span class="line"><span style="color:#000000;">解释：</span></span>
<span class="line"><span style="color:#000000;">在这个例子中，我们需要选出长度为 2 的子序列。</span></span>
<span class="line"><span style="color:#000000;">其中一种方案是 items[0] = [3,2] 和 items[2] = [10,1] 。</span></span>
<span class="line"><span style="color:#000000;">子序列的总利润为 3 + 10 = 13 ，子序列包含 2 种不同类别 [2,1] 。</span></span>
<span class="line"><span style="color:#000000;">因此，优雅度为 13 + 22 = 17 ，可以证明 17 是可以获得的最大优雅度。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="示例-2" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入：items = [[3,1],[3,1],[2,2],[5,3]], k = 3</span></span>
<span class="line"><span style="color:#000000;">输出：19</span></span>
<span class="line"><span style="color:#000000;">解释：</span></span>
<span class="line"><span style="color:#000000;">在这个例子中，我们需要选出长度为 3 的子序列。 </span></span>
<span class="line"><span style="color:#000000;">其中一种方案是 items[0] = [3,1] ，items[2] = [2,2] 和 items[3] = [5,3] 。</span></span>
<span class="line"><span style="color:#000000;">子序列的总利润为 3 + 2 + 5 = 10 ，子序列包含 3 种不同类别 [1, 2, 3] 。 </span></span>
<span class="line"><span style="color:#000000;">因此，优雅度为 10 + 32 = 19 ，可以证明 19 是可以获得的最大优雅度。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="示例-3" tabindex="-1">示例 3： <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例 3：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入：items = [[1,1],[2,1],[3,1]], k = 3</span></span>
<span class="line"><span style="color:#000000;">输出：7</span></span>
<span class="line"><span style="color:#000000;">解释：</span></span>
<span class="line"><span style="color:#000000;">在这个例子中，我们需要选出长度为 3 的子序列。</span></span>
<span class="line"><span style="color:#000000;">我们需要选中所有项目。</span></span>
<span class="line"><span style="color:#000000;">子序列的总利润为 1 + 2 + 3 = 6，子序列包含 1 种不同类别 [1] 。</span></span>
<span class="line"><span style="color:#000000;">因此，最大优雅度为 6 + 12 = 7 。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="提示" tabindex="-1">提示： <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示：&quot;">​</a></h3><ul><li>1 &lt;= items.length == n &lt;= 10^5</li><li>items[i].length == 2</li><li>items[i][0] == profiti</li><li>items[i][1] == categoryi</li><li>1 &lt;= profiti &lt;= 10^9</li><li>1 &lt;= categoryi &lt;= n</li><li>1 &lt;= k &lt;= n</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki light-plus"><code><span class="line"><span style="color:#008000;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#008000;">如何比较两种方案的优劣？</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">比较相对值，比算绝对值要方便</span></span>
<span class="line"><span style="color:#008000;">total_profit </span></span>
<span class="line"><span style="color:#008000;">distinct_categories</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">找到一个 base</span></span>
<span class="line"><span style="color:#008000;">先选最大的 k 个利润，这可能是一个答案</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">考虑下一个项目要不要选</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">由于利润从大到小排序，利润和 total_profit 不会变大</span></span>
<span class="line"><span style="color:#008000;">所以重点就在 distinct_categories 能不能变大？</span></span>
<span class="line"><span style="color:#008000;">分类讨论：</span></span>
<span class="line"><span style="color:#008000;">1. 如果新添加的项目的类别之前选过了，那么 distinct_categories 不会变大</span></span>
<span class="line"><span style="color:#008000;">2. 如果新添加的项目的类别之前没选过（没出现过）</span></span>
<span class="line"><span style="color:#008000;">2.1 如果移除的项目的类别只有一个，那么 distinct_categories-1+1，不变，不行</span></span>
<span class="line"><span style="color:#008000;">2.2 如果移除的项目的类别有多个，那么 distinct_categories+1，这种情况就是可以的</span></span>
<span class="line"><span style="color:#008000;">    - 选一个利润最小的移除，用一个栈（数组）维护</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#000000;"> </span><span style="color:#267F99;">Solution</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">def</span><span style="color:#000000;"> </span><span style="color:#795E26;">findMaximumElegance</span><span style="color:#000000;">(</span><span style="color:#001080;">self</span><span style="color:#000000;">, </span><span style="color:#001080;">items</span><span style="color:#000000;">: List[List[</span><span style="color:#267F99;">int</span><span style="color:#000000;">]], </span><span style="color:#001080;">k</span><span style="color:#000000;">: </span><span style="color:#267F99;">int</span><span style="color:#000000;">) -&gt; </span><span style="color:#267F99;">int</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#008000;"># 利润从大到小排序</span></span>
<span class="line"><span style="color:#000000;">        items.sort(</span><span style="color:#001080;">key</span><span style="color:#000000;">=</span><span style="color:#0000FF;">lambda</span><span style="color:#000000;"> </span><span style="color:#001080;">x</span><span style="color:#000000;">: -x[</span><span style="color:#098658;">0</span><span style="color:#000000;">])</span></span>
<span class="line"><span style="color:#000000;">        ans = total_profit = </span><span style="color:#098658;">0</span></span>
<span class="line"><span style="color:#000000;">        vis = </span><span style="color:#267F99;">set</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">        dup = []  </span><span style="color:#008000;"># 重复类别的利润</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> i, (profit, category) </span><span style="color:#AF00DB;">in</span><span style="color:#000000;"> </span><span style="color:#795E26;">enumerate</span><span style="color:#000000;">(items):</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> i &lt; k:</span></span>
<span class="line"><span style="color:#000000;">                total_profit += profit</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> category </span><span style="color:#0000FF;">not</span><span style="color:#000000;"> </span><span style="color:#0000FF;">in</span><span style="color:#000000;"> vis:</span></span>
<span class="line"><span style="color:#000000;">                    vis.add(category)</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#AF00DB;">else</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#000000;">                    dup.append(profit)</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">elif</span><span style="color:#000000;"> dup </span><span style="color:#0000FF;">and</span><span style="color:#000000;"> category </span><span style="color:#0000FF;">not</span><span style="color:#000000;"> </span><span style="color:#0000FF;">in</span><span style="color:#000000;"> vis:</span></span>
<span class="line"><span style="color:#000000;">                vis.add(category)</span></span>
<span class="line"><span style="color:#000000;">                total_profit -= dup.pop()</span></span>
<span class="line"><span style="color:#000000;">                total_profit += profit</span></span>
<span class="line"><span style="color:#000000;">            ans = </span><span style="color:#795E26;">max</span><span style="color:#000000;">(ans, total_profit + </span><span style="color:#795E26;">len</span><span style="color:#000000;">(vis) * </span><span style="color:#795E26;">len</span><span style="color:#000000;">(vis))</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> ans</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki light-plus"><code><span class="line"><span style="color:#0000FF;">class</span><span style="color:#000000;"> </span><span style="color:#267F99;">Solution</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">public:</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#795E26;">findMaximumElegance</span><span style="color:#000000;">(</span><span style="color:#267F99;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt;&gt; </span><span style="color:#0000FF;">&amp;</span><span style="color:#001080;">items</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">k</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">        // 把利润从大到小排序</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">sort</span><span style="color:#000000;">(</span><span style="color:#001080;">items</span><span style="color:#000000;">.</span><span style="color:#795E26;">begin</span><span style="color:#000000;">(), </span><span style="color:#001080;">items</span><span style="color:#000000;">.</span><span style="color:#795E26;">end</span><span style="color:#000000;">(), [](</span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">auto</span><span style="color:#000000;"> </span><span style="color:#0000FF;">&amp;</span><span style="color:#001080;">a</span><span style="color:#000000;">, </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">auto</span><span style="color:#000000;"> </span><span style="color:#0000FF;">&amp;</span><span style="color:#001080;">b</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#001080;">a</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">] &gt; </span><span style="color:#001080;">b</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">        });</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#0000FF;">long</span><span style="color:#000000;"> ans = </span><span style="color:#098658;">0</span><span style="color:#000000;">, total_profit = </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">        unordered_set&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; vis;</span></span>
<span class="line"><span style="color:#000000;">        stack&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; duplicate;</span><span style="color:#008000;"> // 重复类别的利润</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">0</span><span style="color:#000000;">; i &lt; </span><span style="color:#001080;">items</span><span style="color:#000000;">.</span><span style="color:#795E26;">size</span><span style="color:#000000;">() ; i ++ ) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> profit = </span><span style="color:#001080;">items</span><span style="color:#000000;">[i][</span><span style="color:#098658;">0</span><span style="color:#000000;">], category = </span><span style="color:#001080;">items</span><span style="color:#000000;">[i][</span><span style="color:#098658;">1</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (i &lt; k) {</span></span>
<span class="line"><span style="color:#000000;">                total_profit += profit;</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">vis</span><span style="color:#000000;">.</span><span style="color:#795E26;">insert</span><span style="color:#000000;">(category).</span><span style="color:#001080;">second</span><span style="color:#000000;">)</span><span style="color:#008000;"> // 重复类别</span></span>
<span class="line"><span style="color:#000000;">                    </span><span style="color:#001080;">duplicate</span><span style="color:#000000;">.</span><span style="color:#795E26;">push</span><span style="color:#000000;">(profit);</span></span>
<span class="line"><span style="color:#000000;">            } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">duplicate</span><span style="color:#000000;">.</span><span style="color:#795E26;">empty</span><span style="color:#000000;">() &amp;&amp; </span><span style="color:#001080;">vis</span><span style="color:#000000;">.</span><span style="color:#795E26;">insert</span><span style="color:#000000;">(category).</span><span style="color:#001080;">second</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">                total_profit += profit - </span><span style="color:#001080;">duplicate</span><span style="color:#000000;">.</span><span style="color:#795E26;">top</span><span style="color:#000000;">();</span><span style="color:#008000;"> // 选一个重复类别中的最小利润替换</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#001080;">duplicate</span><span style="color:#000000;">.</span><span style="color:#795E26;">pop</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">            }</span><span style="color:#008000;"> // else：比前面的利润小，而且类别还重复了，选它只会让 totalProfit 变小，vis.size() 不变，优雅度不会变大</span></span>
<span class="line"><span style="color:#000000;">            ans = </span><span style="color:#795E26;">max</span><span style="color:#000000;">(ans, total_profit + (</span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#0000FF;">long</span><span style="color:#000000;">) </span><span style="color:#001080;">vis</span><span style="color:#000000;">.</span><span style="color:#795E26;">size</span><span style="color:#000000;">() * (</span><span style="color:#0000FF;">long</span><span style="color:#000000;"> </span><span style="color:#0000FF;">long</span><span style="color:#000000;">) </span><span style="color:#001080;">vis</span><span style="color:#000000;">.</span><span style="color:#795E26;">size</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> ans;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,19);function b(u,m,d,F,g,f){const n=r("font");return l(),p("div",null,[i,e(n,{color:"red"},{default:o(()=>[c("困难")]),_:1}),y])}const v=a(t,[["render",b]]);export{_ as __pageData,v as default};
