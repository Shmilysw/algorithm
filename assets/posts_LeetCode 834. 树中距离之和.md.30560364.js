import{_ as s,v as n,b as a,R as l}from"./chunks/framework.12f635d0.js";const m=JSON.parse('{"title":"LeetCode 834. 树中距离之和","description":"","frontmatter":{"title":"LeetCode 834. 树中距离之和","date":"2023-08-02T00:00:00.000Z","tags":["树形dp","dp"]},"headers":[],"relativePath":"posts/LeetCode 834. 树中距离之和.md","filePath":"posts/LeetCode 834. 树中距离之和.md"}'),p={name:"posts/LeetCode 834. 树中距离之和.md"},e=l(`<hr><h2 id="树形dp" tabindex="-1">树形dp <a class="header-anchor" href="#树形dp" aria-label="Permalink to &quot;树形dp&quot;">​</a></h2><h2 id="leetcode-834-树中距离之和" tabindex="-1"><a href="https://leetcode.cn/problems/sum-of-distances-in-tree/description/" target="_blank" rel="noreferrer">LeetCode 834. 树中距离之和</a> <a class="header-anchor" href="#leetcode-834-树中距离之和" aria-label="Permalink to &quot;[LeetCode 834. 树中距离之和](https://leetcode.cn/problems/sum-of-distances-in-tree/description/)&quot;">​</a></h2><p>给定一个无向、连通的树。树中有 n 个标记为 0...n-1 的节点以及 n-1 条边 。</p><p>给定整数 n 和数组 edges ， edges[i] = [ai, bi]表示树中的节点 ai 和 bi 之间有一条边。</p><p>返回长度为 n 的数组 answer ，其中 answer[i] 是树中第 i 个节点与所有其他节点之间的距离之和。</p><h3 id="示例-1" tabindex="-1">示例 1: <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1:&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]</span></span>
<span class="line"><span style="color:#000000;">输出: [8,12,6,10,10,10]</span></span>
<span class="line"><span style="color:#000000;">解释: 树如图所示。</span></span>
<span class="line"><span style="color:#000000;">我们可以计算出 dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) </span></span>
<span class="line"><span style="color:#000000;">也就是 1 + 1 + 2 + 2 + 2 = 8。 因此，answer[0] = 8，以此类推。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="示例-2" tabindex="-1">示例 2: <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2:&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入: n = 1, edges = []</span></span>
<span class="line"><span style="color:#000000;">输出: [0]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="示例-3" tabindex="-1">示例 3: <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例 3:&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki light-plus"><code><span class="line"><span style="color:#000000;">输入: n = 2, edges = [[1,0]]</span></span>
<span class="line"><span style="color:#000000;">输出: [1,1]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="提示" tabindex="-1">提示: <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示:&quot;">​</a></h3><ul><li>1 &lt;= n &lt;= 3 * 10^4</li><li>edges.length == n - 1</li><li>edges[i].length == 2</li><li>0 &lt;= ai, bi &lt; n</li><li>ai != bi</li><li>给定的输入保证为有效的树</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki light-plus"><code><span class="line"><span style="color:#008000;">// 换根dp</span></span>
<span class="line"><span style="color:#008000;">/*</span></span>
<span class="line"><span style="color:#008000;">    ans[0] 表示根节点的子树的节点个数</span></span>
<span class="line"><span style="color:#008000;">    size[] -&gt; 当前节点为根的子树的节点个数</span></span>
<span class="line"><span style="color:#008000;">    size[u] += size[j]</span></span>
<span class="line"><span style="color:#008000;">    ans[j] = ans[u] + n - 2 * size[j]</span></span>
<span class="line"><span style="color:#008000;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> N = </span><span style="color:#098658;">3e4</span><span style="color:#000000;"> + </span><span style="color:#098658;">10</span><span style="color:#000000;">, M = </span><span style="color:#098658;">2</span><span style="color:#000000;"> * N;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#000000;"> </span><span style="color:#267F99;">Solution</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">public:</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> n;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">h</span><span style="color:#000000;">[N], </span><span style="color:#001080;">e</span><span style="color:#000000;">[M], </span><span style="color:#001080;">ne</span><span style="color:#000000;">[M], idx;</span></span>
<span class="line"><span style="color:#000000;">    vector&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; ans;</span></span>
<span class="line"><span style="color:#000000;">    vector&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; size;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">void</span><span style="color:#000000;"> </span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">a</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">b</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">e</span><span style="color:#000000;">[idx] = b, </span><span style="color:#001080;">ne</span><span style="color:#000000;">[idx] = </span><span style="color:#001080;">h</span><span style="color:#000000;">[a], </span><span style="color:#001080;">h</span><span style="color:#000000;">[a] = idx ++ ;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">void</span><span style="color:#000000;"> </span><span style="color:#795E26;">dfs1</span><span style="color:#000000;">(</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">u</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">fa</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">depth</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">ans</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">] += depth;</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#001080;">h</span><span style="color:#000000;">[u]; ~i ; i = </span><span style="color:#001080;">ne</span><span style="color:#000000;">[i]) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> j = </span><span style="color:#001080;">e</span><span style="color:#000000;">[i];</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (j == fa) </span><span style="color:#AF00DB;">continue</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#795E26;">dfs1</span><span style="color:#000000;">(j, u, depth + </span><span style="color:#098658;">1</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">size</span><span style="color:#000000;">[u] += </span><span style="color:#001080;">size</span><span style="color:#000000;">[j]; </span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">void</span><span style="color:#000000;"> </span><span style="color:#795E26;">dfs2</span><span style="color:#000000;">(</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">u</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">fa</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#001080;">h</span><span style="color:#000000;">[u]; ~i ; i = </span><span style="color:#001080;">ne</span><span style="color:#000000;">[i]) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> j = </span><span style="color:#001080;">e</span><span style="color:#000000;">[i];</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (j == fa) </span><span style="color:#AF00DB;">continue</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">ans</span><span style="color:#000000;">[j] = </span><span style="color:#001080;">ans</span><span style="color:#000000;">[u] + n - </span><span style="color:#098658;">2</span><span style="color:#000000;"> * </span><span style="color:#001080;">size</span><span style="color:#000000;">[j];</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#795E26;">dfs2</span><span style="color:#000000;">(j, u);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#267F99;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">sumOfDistancesInTree</span><span style="color:#000000;">(</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#001080;">n</span><span style="color:#000000;">, </span><span style="color:#267F99;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt;&gt;</span><span style="color:#0000FF;">&amp;</span><span style="color:#000000;"> </span><span style="color:#001080;">edges</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">memset</span><span style="color:#000000;">(h, -</span><span style="color:#098658;">1</span><span style="color:#000000;">, sizeof h);</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">this</span><span style="color:#000000;">-&gt;</span><span style="color:#001080;">n</span><span style="color:#000000;"> = n;</span></span>
<span class="line"><span style="color:#000000;">        ans = </span><span style="color:#795E26;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt;(n, </span><span style="color:#098658;">0</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        size = </span><span style="color:#795E26;">vector</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">int</span><span style="color:#000000;">&gt;(n, </span><span style="color:#098658;">1</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">auto</span><span style="color:#000000;"> &amp;e: edges) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> x = </span><span style="color:#001080;">e</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">], y = </span><span style="color:#001080;">e</span><span style="color:#000000;">[</span><span style="color:#098658;">1</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#795E26;">add</span><span style="color:#000000;">(x, y), </span><span style="color:#795E26;">add</span><span style="color:#000000;">(y, x);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">dfs1</span><span style="color:#000000;">(</span><span style="color:#098658;">0</span><span style="color:#000000;">, -</span><span style="color:#098658;">1</span><span style="color:#000000;">, </span><span style="color:#098658;">0</span><span style="color:#000000;">);</span><span style="color:#008000;"> // 计算size</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">dfs2</span><span style="color:#000000;">(</span><span style="color:#098658;">0</span><span style="color:#000000;">, -</span><span style="color:#098658;">1</span><span style="color:#000000;">);</span><span style="color:#008000;"> // 计算ans</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> ans;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>`,15),o=[e];function r(c,t,i,y,b,d){return n(),a("div",null,o)}const F=s(p,[["render",r]]);export{m as __pageData,F as default};
